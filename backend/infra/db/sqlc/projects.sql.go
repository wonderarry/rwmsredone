// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: projects.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const addProjectMember = `-- name: AddProjectMember :exec
INSERT INTO project_members (project_id, account_id, role_key)
VALUES ($1, $2, $3)
ON CONFLICT (project_id, account_id, role_key) DO NOTHING
`

type AddProjectMemberParams struct {
	ProjectID string `json:"project_id"`
	AccountID string `json:"account_id"`
	RoleKey   string `json:"role_key"`
}

func (q *Queries) AddProjectMember(ctx context.Context, arg AddProjectMemberParams) error {
	_, err := q.db.Exec(ctx, addProjectMember, arg.ProjectID, arg.AccountID, arg.RoleKey)
	return err
}

const createProject = `-- name: CreateProject :exec
INSERT INTO projects (id, name, theme, descr, created_by)
VALUES ($1, $2, $3, $4, $5)
`

type CreateProjectParams struct {
	ID        string      `json:"id"`
	Name      string      `json:"name"`
	Theme     pgtype.Text `json:"theme"`
	Descr     pgtype.Text `json:"descr"`
	CreatedBy string      `json:"created_by"`
}

func (q *Queries) CreateProject(ctx context.Context, arg CreateProjectParams) error {
	_, err := q.db.Exec(ctx, createProject,
		arg.ID,
		arg.Name,
		arg.Theme,
		arg.Descr,
		arg.CreatedBy,
	)
	return err
}

const getProject = `-- name: GetProject :one
SELECT id, name, theme, descr, created_by, created_at, updated_at
FROM projects
WHERE id = $1
`

func (q *Queries) GetProject(ctx context.Context, id string) (Project, error) {
	row := q.db.QueryRow(ctx, getProject, id)
	var i Project
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Theme,
		&i.Descr,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const isProjectMember = `-- name: IsProjectMember :one
SELECT EXISTS (
  SELECT 1 FROM project_members
  WHERE project_id = $1 AND account_id = $2 AND role_key = $3
) AS ok
`

type IsProjectMemberParams struct {
	ProjectID string `json:"project_id"`
	AccountID string `json:"account_id"`
	RoleKey   string `json:"role_key"`
}

func (q *Queries) IsProjectMember(ctx context.Context, arg IsProjectMemberParams) (bool, error) {
	row := q.db.QueryRow(ctx, isProjectMember, arg.ProjectID, arg.AccountID, arg.RoleKey)
	var ok bool
	err := row.Scan(&ok)
	return ok, err
}

const listProjectMembers = `-- name: ListProjectMembers :many
SELECT project_id, account_id, role_key
FROM project_members
WHERE project_id = $1
ORDER BY account_id, role_key
`

func (q *Queries) ListProjectMembers(ctx context.Context, projectID string) ([]ProjectMember, error) {
	rows, err := q.db.Query(ctx, listProjectMembers, projectID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ProjectMember
	for rows.Next() {
		var i ProjectMember
		if err := rows.Scan(&i.ProjectID, &i.AccountID, &i.RoleKey); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listProjectsForAccount = `-- name: ListProjectsForAccount :many
SELECT p.id, p.name, p.theme, p.descr, p.created_by, p.created_at, p.updated_at
FROM projects p
JOIN project_members m ON m.project_id = p.id
WHERE m.account_id = $1
GROUP BY p.id
ORDER BY p.created_at DESC
`

func (q *Queries) ListProjectsForAccount(ctx context.Context, accountID string) ([]Project, error) {
	rows, err := q.db.Query(ctx, listProjectsForAccount, accountID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Project
	for rows.Next() {
		var i Project
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Theme,
			&i.Descr,
			&i.CreatedBy,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeProjectMember = `-- name: RemoveProjectMember :exec
DELETE FROM project_members
WHERE project_id = $1 AND account_id = $2 AND role_key = $3
`

type RemoveProjectMemberParams struct {
	ProjectID string `json:"project_id"`
	AccountID string `json:"account_id"`
	RoleKey   string `json:"role_key"`
}

func (q *Queries) RemoveProjectMember(ctx context.Context, arg RemoveProjectMemberParams) error {
	_, err := q.db.Exec(ctx, removeProjectMember, arg.ProjectID, arg.AccountID, arg.RoleKey)
	return err
}

const updateProjectMeta = `-- name: UpdateProjectMeta :exec
UPDATE projects
SET name = $2, theme = $3, descr = $4, updated_at = now()
WHERE id = $1
`

type UpdateProjectMetaParams struct {
	ID    string      `json:"id"`
	Name  string      `json:"name"`
	Theme pgtype.Text `json:"theme"`
	Descr pgtype.Text `json:"descr"`
}

func (q *Queries) UpdateProjectMeta(ctx context.Context, arg UpdateProjectMetaParams) error {
	_, err := q.db.Exec(ctx, updateProjectMeta,
		arg.ID,
		arg.Name,
		arg.Theme,
		arg.Descr,
	)
	return err
}
