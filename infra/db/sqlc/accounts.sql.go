// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: accounts.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const addGlobalRole = `-- name: AddGlobalRole :exec
INSERT INTO account_global_roles (account_id, role_key)
VALUES ($1, $2)
ON CONFLICT (account_id, role_key) DO NOTHING
`

type AddGlobalRoleParams struct {
	AccountID string `json:"account_id"`
	RoleKey   string `json:"role_key"`
}

func (q *Queries) AddGlobalRole(ctx context.Context, arg AddGlobalRoleParams) error {
	_, err := q.db.Exec(ctx, addGlobalRole, arg.AccountID, arg.RoleKey)
	return err
}

const createAccount = `-- name: CreateAccount :exec
INSERT INTO accounts (id, first_name, middle_name, last_name, grp)
VALUES ($1, $2, $3, $4, $5)
`

type CreateAccountParams struct {
	ID         string      `json:"id"`
	FirstName  pgtype.Text `json:"first_name"`
	MiddleName pgtype.Text `json:"middle_name"`
	LastName   pgtype.Text `json:"last_name"`
	Grp        pgtype.Text `json:"grp"`
}

func (q *Queries) CreateAccount(ctx context.Context, arg CreateAccountParams) error {
	_, err := q.db.Exec(ctx, createAccount,
		arg.ID,
		arg.FirstName,
		arg.MiddleName,
		arg.LastName,
		arg.Grp,
	)
	return err
}

const getAccount = `-- name: GetAccount :one
SELECT id, first_name, middle_name, last_name, grp, created_at, updated_at
FROM accounts
WHERE id = $1
`

func (q *Queries) GetAccount(ctx context.Context, id string) (Account, error) {
	row := q.db.QueryRow(ctx, getAccount, id)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.MiddleName,
		&i.LastName,
		&i.Grp,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const hasGlobalRole = `-- name: HasGlobalRole :one
SELECT EXISTS (
  SELECT 1 FROM account_global_roles
  WHERE account_id = $1 AND role_key = $2
) AS ok
`

type HasGlobalRoleParams struct {
	AccountID string `json:"account_id"`
	RoleKey   string `json:"role_key"`
}

func (q *Queries) HasGlobalRole(ctx context.Context, arg HasGlobalRoleParams) (bool, error) {
	row := q.db.QueryRow(ctx, hasGlobalRole, arg.AccountID, arg.RoleKey)
	var ok bool
	err := row.Scan(&ok)
	return ok, err
}

const listGlobalRoles = `-- name: ListGlobalRoles :many
SELECT role_key
FROM account_global_roles
WHERE account_id = $1
ORDER BY role_key
`

func (q *Queries) ListGlobalRoles(ctx context.Context, accountID string) ([]string, error) {
	rows, err := q.db.Query(ctx, listGlobalRoles, accountID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var role_key string
		if err := rows.Scan(&role_key); err != nil {
			return nil, err
		}
		items = append(items, role_key)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
