// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: identities.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createIdentity = `-- name: CreateIdentity :exec
INSERT INTO identities (
  id, account_id, provider, subject, email, password_hash, refresh_token, expires_at
) VALUES ($1,$2,$3,$4,$5,$6,$7,$8)
`

type CreateIdentityParams struct {
	ID           string             `json:"id"`
	AccountID    string             `json:"account_id"`
	Provider     string             `json:"provider"`
	Subject      string             `json:"subject"`
	Email        pgtype.Text        `json:"email"`
	PasswordHash pgtype.Text        `json:"password_hash"`
	RefreshToken pgtype.Text        `json:"refresh_token"`
	ExpiresAt    pgtype.Timestamptz `json:"expires_at"`
}

func (q *Queries) CreateIdentity(ctx context.Context, arg CreateIdentityParams) error {
	_, err := q.db.Exec(ctx, createIdentity,
		arg.ID,
		arg.AccountID,
		arg.Provider,
		arg.Subject,
		arg.Email,
		arg.PasswordHash,
		arg.RefreshToken,
		arg.ExpiresAt,
	)
	return err
}

const getIdentityByProviderSubject = `-- name: GetIdentityByProviderSubject :one
SELECT id, account_id, provider, subject, email, password_hash, refresh_token, expires_at,
       created_at, updated_at
FROM identities
WHERE provider = $1 AND subject = $2
`

type GetIdentityByProviderSubjectParams struct {
	Provider string `json:"provider"`
	Subject  string `json:"subject"`
}

func (q *Queries) GetIdentityByProviderSubject(ctx context.Context, arg GetIdentityByProviderSubjectParams) (Identity, error) {
	row := q.db.QueryRow(ctx, getIdentityByProviderSubject, arg.Provider, arg.Subject)
	var i Identity
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.Provider,
		&i.Subject,
		&i.Email,
		&i.PasswordHash,
		&i.RefreshToken,
		&i.ExpiresAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listIdentitiesByAccount = `-- name: ListIdentitiesByAccount :many
SELECT id, account_id, provider, subject, email, password_hash, refresh_token, expires_at,
       created_at, updated_at
FROM identities
WHERE account_id = $1
ORDER BY created_at ASC
`

func (q *Queries) ListIdentitiesByAccount(ctx context.Context, accountID string) ([]Identity, error) {
	rows, err := q.db.Query(ctx, listIdentitiesByAccount, accountID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Identity
	for rows.Next() {
		var i Identity
		if err := rows.Scan(
			&i.ID,
			&i.AccountID,
			&i.Provider,
			&i.Subject,
			&i.Email,
			&i.PasswordHash,
			&i.RefreshToken,
			&i.ExpiresAt,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
