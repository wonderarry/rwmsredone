// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: processes.sql

package sqlc

import (
	"context"
)

const addProcessMember = `-- name: AddProcessMember :exec
INSERT INTO process_members (process_id, account_id, role_key)
VALUES ($1, $2, $3)
ON CONFLICT (process_id, account_id, role_key) DO NOTHING
`

type AddProcessMemberParams struct {
	ProcessID string `json:"process_id"`
	AccountID string `json:"account_id"`
	RoleKey   string `json:"role_key"`
}

func (q *Queries) AddProcessMember(ctx context.Context, arg AddProcessMemberParams) error {
	_, err := q.db.Exec(ctx, addProcessMember, arg.ProcessID, arg.AccountID, arg.RoleKey)
	return err
}

const createProcess = `-- name: CreateProcess :exec
INSERT INTO processes (id, project_id, template_key, name, current_stage, state)
VALUES ($1, $2, $3, $4, $5, $6)
`

type CreateProcessParams struct {
	ID           string `json:"id"`
	ProjectID    string `json:"project_id"`
	TemplateKey  string `json:"template_key"`
	Name         string `json:"name"`
	CurrentStage string `json:"current_stage"`
	State        string `json:"state"`
}

func (q *Queries) CreateProcess(ctx context.Context, arg CreateProcessParams) error {
	_, err := q.db.Exec(ctx, createProcess,
		arg.ID,
		arg.ProjectID,
		arg.TemplateKey,
		arg.Name,
		arg.CurrentStage,
		arg.State,
	)
	return err
}

const getParentProjectID = `-- name: GetParentProjectID :one
SELECT project_id
FROM processes
WHERE id = $1
`

func (q *Queries) GetParentProjectID(ctx context.Context, id string) (string, error) {
	row := q.db.QueryRow(ctx, getParentProjectID, id)
	var project_id string
	err := row.Scan(&project_id)
	return project_id, err
}

const getProcess = `-- name: GetProcess :one
SELECT id, project_id, template_key, name, current_stage, state, created_at, updated_at
FROM processes
WHERE id = $1
`

func (q *Queries) GetProcess(ctx context.Context, id string) (Process, error) {
	row := q.db.QueryRow(ctx, getProcess, id)
	var i Process
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.TemplateKey,
		&i.Name,
		&i.CurrentStage,
		&i.State,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const isProcessMember = `-- name: IsProcessMember :one
SELECT EXISTS (
  SELECT 1 FROM process_members
  WHERE process_id = $1 AND account_id = $2 AND role_key = $3
) AS ok
`

type IsProcessMemberParams struct {
	ProcessID string `json:"process_id"`
	AccountID string `json:"account_id"`
	RoleKey   string `json:"role_key"`
}

func (q *Queries) IsProcessMember(ctx context.Context, arg IsProcessMemberParams) (bool, error) {
	row := q.db.QueryRow(ctx, isProcessMember, arg.ProcessID, arg.AccountID, arg.RoleKey)
	var ok bool
	err := row.Scan(&ok)
	return ok, err
}

const listProcessMembers = `-- name: ListProcessMembers :many
SELECT process_id, account_id, role_key
FROM process_members
WHERE process_id = $1
ORDER BY account_id, role_key
`

func (q *Queries) ListProcessMembers(ctx context.Context, processID string) ([]ProcessMember, error) {
	rows, err := q.db.Query(ctx, listProcessMembers, processID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ProcessMember
	for rows.Next() {
		var i ProcessMember
		if err := rows.Scan(&i.ProcessID, &i.AccountID, &i.RoleKey); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeProcessMember = `-- name: RemoveProcessMember :exec
DELETE FROM process_members
WHERE process_id = $1 AND account_id = $2 AND role_key = $3
`

type RemoveProcessMemberParams struct {
	ProcessID string `json:"process_id"`
	AccountID string `json:"account_id"`
	RoleKey   string `json:"role_key"`
}

func (q *Queries) RemoveProcessMember(ctx context.Context, arg RemoveProcessMemberParams) error {
	_, err := q.db.Exec(ctx, removeProcessMember, arg.ProcessID, arg.AccountID, arg.RoleKey)
	return err
}

const setProcessCurrentStage = `-- name: SetProcessCurrentStage :exec
UPDATE processes
SET current_stage = $2, updated_at = now()
WHERE id = $1
`

type SetProcessCurrentStageParams struct {
	ID           string `json:"id"`
	CurrentStage string `json:"current_stage"`
}

func (q *Queries) SetProcessCurrentStage(ctx context.Context, arg SetProcessCurrentStageParams) error {
	_, err := q.db.Exec(ctx, setProcessCurrentStage, arg.ID, arg.CurrentStage)
	return err
}

const setProcessState = `-- name: SetProcessState :exec
UPDATE processes
SET state = $2, updated_at = now()
WHERE id = $1
`

type SetProcessStateParams struct {
	ID    string `json:"id"`
	State string `json:"state"`
}

func (q *Queries) SetProcessState(ctx context.Context, arg SetProcessStateParams) error {
	_, err := q.db.Exec(ctx, setProcessState, arg.ID, arg.State)
	return err
}
